[{"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\index.js":"1","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\App.js":"2","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\store.js":"3","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Header.js":"4","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Footer.js":"5","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\HomeScreen.js":"6","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\reducers\\campgroundReducer.js":"7","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\actions\\campgroundActions.js":"8","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\constants\\campgroundConstants.js":"9","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Place.js":"10","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\PlaceDetailScreen.js":"11","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Message.js":"12","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Loader.js":"13","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\AddNewCampground.js":"14","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\FormContainer.js":"15","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\EditCampgroundDetails.js":"16","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\SignUpScreen.js":"17","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\SignInScreen.js":"18","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\reducers\\userReducer.js":"19","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\constants\\userConstants.js":"20","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\actions\\userActions.js":"21","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\reducers\\appReducer.js":"22","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\constants\\appConstants.js":"23","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\PopUp.js":"24"},{"size":361,"mtime":1609597714772,"results":"25","hashOfConfig":"26"},{"size":3416,"mtime":1611041629577,"results":"27","hashOfConfig":"26"},{"size":1069,"mtime":1611051319498,"results":"28","hashOfConfig":"26"},{"size":2509,"mtime":1610984015017,"results":"29","hashOfConfig":"26"},{"size":427,"mtime":1609614192286,"results":"30","hashOfConfig":"26"},{"size":1519,"mtime":1610993512469,"results":"31","hashOfConfig":"26"},{"size":3836,"mtime":1611051532199,"results":"32","hashOfConfig":"26"},{"size":4048,"mtime":1611051380538,"results":"33","hashOfConfig":"26"},{"size":990,"mtime":1611050492195,"results":"34","hashOfConfig":"26"},{"size":918,"mtime":1609791221068,"results":"35","hashOfConfig":"26"},{"size":4082,"mtime":1611061491181,"results":"36","hashOfConfig":"26"},{"size":248,"mtime":1609662790610,"results":"37","hashOfConfig":"26"},{"size":403,"mtime":1609662583429,"results":"38","hashOfConfig":"26"},{"size":9060,"mtime":1611074527516,"results":"39","hashOfConfig":"26"},{"size":345,"mtime":1609695587169,"results":"40","hashOfConfig":"26"},{"size":8516,"mtime":1611049751646,"results":"41","hashOfConfig":"26"},{"size":5419,"mtime":1611035169190,"results":"42","hashOfConfig":"26"},{"size":4472,"mtime":1611035148146,"results":"43","hashOfConfig":"26"},{"size":3026,"mtime":1610909043133,"results":"44","hashOfConfig":"26"},{"size":794,"mtime":1610965754980,"results":"45","hashOfConfig":"26"},{"size":3290,"mtime":1611033309595,"results":"46","hashOfConfig":"26"},{"size":2486,"mtime":1611041558382,"results":"47","hashOfConfig":"26"},{"size":872,"mtime":1611041495444,"results":"48","hashOfConfig":"26"},{"size":500,"mtime":1611034930062,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"12cpiaz",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\index.js",[],["102","103"],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\App.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\store.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Header.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Footer.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\HomeScreen.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\reducers\\campgroundReducer.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\actions\\campgroundActions.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\constants\\campgroundConstants.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Place.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\PlaceDetailScreen.js",["104"],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Message.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\Loader.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\AddNewCampground.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\FormContainer.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\EditCampgroundDetails.js",["105","106"],"import React,{useState,useEffect} from 'react'\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport {Link} from 'react-router-dom'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { Button } from 'react-bootstrap';\r\nimport { Form, FormGroup, Label, Input,FormFeedback} from 'reactstrap';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport Message from '../components/Message'\r\nimport {editPlace} from '../actions/campgroundActions'\r\nimport {PLACE_EDIT_RESET,} from '../constants/campgroundConstants'\r\nimport Loader from '../components/Loader'\r\nimport {PLACE_DETAIL_EDITED_PLACE} from '../constants/appConstants'\r\nimport {USER_NO_PERMISSION} from '../constants/appConstants'\r\n\r\n\r\nconst EditCampgroundDetails = ({history,match}) => {\r\n    const placeId = match.params.id\r\n\r\n    const placeDetail = useSelector(state => state.placeDetail)\r\n    const {place,loading:loadingPlace} = placeDetail\r\n    const dispatch = useDispatch()\r\n\r\n    const placeEdit = useSelector(state => state.placeEdit)\r\n    const {loading:loadingEdit,success:successEdit,error:errorEdit} = placeEdit\r\n\r\n    const statusState = useSelector(state => state.status)\r\n    const {userInfo: userStatus,isLoggedIn} = statusState\r\n    console.log(statusState);\r\n    const [title,setTitle] = useState('')\r\n    const [price,setPrice] = useState();\r\n    const [description,setDescription] = useState('')\r\n    const [location,setLocation] = useState('')\r\n    const [image,setImage] = useState('')\r\n\r\n    const [touchedTitle,setTouchedTitle] = useState(false)\r\n    const [touchedPrice,setTouchedPrice] = useState(false);\r\n    const [touchedDescription,setTouchedDescription] = useState(false)\r\n    const [touchedLocation,setTouchedLocation] = useState(false)\r\n    const [touchedImage,setTouchedImage] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        \r\n        \r\n        if(!isLoggedIn){\r\n            dispatch({type:USER_NO_PERMISSION})\r\n                history.push(`/campground/${placeId}`)\r\n        } \r\n        \r\n        if(!place.title){\r\n            history.push(`/campground/${placeId}`)\r\n        }\r\n        if(successEdit){\r\n            dispatch({type: PLACE_EDIT_RESET,})\r\n            dispatch({type:PLACE_DETAIL_EDITED_PLACE})\r\n            history.push(`/campground/${placeId}`)\r\n        }\r\n        setTitle(place.title)\r\n        setImage(place.image)\r\n        setDescription(place.description)\r\n        setPrice(place.price)\r\n        setLocation(place.location)\r\n    },[dispatch,match,history,placeId,place,successEdit,isLoggedIn])\r\n\r\n    function validate() {\r\n        const errors = {\r\n            title: '',\r\n            price: '',\r\n            location: '',\r\n            image: '',\r\n            desc: ''\r\n        };\r\n\r\n        if (touchedTitle && title.length < 3)\r\n            errors.title = 'Title should be >= 3 characters';\r\n        \r\n        const reg = /^\\d+$/;\r\n        if (touchedPrice && !reg.test(price))\r\n            errors.price = 'Price should contain only numbers';\r\n        if(touchedPrice && price<0)\r\n            errors.price = 'Price should be greater than zero';\r\n        \r\n        if(touchedLocation && location.length<3){\r\n            errors.location = 'Location should be >= 3 characters'\r\n        }\r\n\r\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n        \r\n        if(touchedImage && !pattern.test(image)){\r\n            errors.image = 'Not a valid URL'\r\n        }\r\n\r\n        if(touchedDescription && description.length<=0)\r\n            errors.desc = 'No Description'\r\n\r\n        return errors;\r\n    }\r\n    \r\n    const errors = validate(title);\r\n\r\n    const submitHandler = (e) => {\r\n       e.preventDefault()\r\n        const campgroundDetails = {\r\n            title,\r\n            price,\r\n            description,\r\n            location,\r\n            image,\r\n            \r\n        }\r\n      dispatch(editPlace(campgroundDetails,placeId))\r\n   }\r\n\r\n    return (\r\n        <Zoom bottom>\r\n            <Link to={`/campground/${placeId}`} className='btn btn-light my-3'>\r\n                Go Back\r\n            </Link>\r\n            <FormContainer>\r\n            <h1>Edit Campground</h1>\r\n            {loadingEdit ? <Loader /> : errorEdit ? <Message variant='danger'>{errorEdit}</Message> : null}\r\n            <Form onSubmit={submitHandler}>\r\n                <FormGroup>\r\n                    <Label htmlFor=\"title\">Title</Label>\r\n                        <Input type=\"text\" id=\"title\" name=\"title\"\r\n                            placeholder=\"Campground title\"\r\n                            value={title}\r\n                            onChange={(e) => setTitle(e.target.value)} \r\n                            onBlur = {() => setTouchedTitle(true)}\r\n                            valid={ errors.title==='' && title.length>=3}\r\n                            invalid={errors.title !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.title}</FormFeedback>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"price\">Price</Label>\r\n                        <Input type=\"text\" id=\"price\" name=\"price\"\r\n                            placeholder=\"Campground price\"\r\n                            value={price}\r\n                            onChange={(e) => setPrice(e.target.value)} \r\n                            onBlur = {() => setTouchedPrice(true)}\r\n                            valid={errors.price === '' && parseInt(price)}\r\n                            invalid={errors.price !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.price}</FormFeedback>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"location\">Location</Label>\r\n                        <Input type=\"text\" id=\"location\" name=\"location\"\r\n                            placeholder=\"Campground location\"\r\n                            value={location}\r\n                            onChange={(e) => setLocation(e.target.value)} \r\n                            onBlur = {() => setTouchedLocation(true)}\r\n                            valid={errors.location === '' && location.length>=3}\r\n                            invalid={errors.location !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.location}</FormFeedback>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor=\"image\">Image</Label>\r\n                        <Input type=\"text\" id=\"image\" name=\"image\"\r\n                            placeholder=\"Campground image\"\r\n                            value={image}\r\n                            onChange={(e) => setImage(e.target.value)} \r\n                            onBlur = {() => setTouchedImage(true)}\r\n                            valid={errors.image === '' && image}\r\n                            invalid={errors.image !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.image}</FormFeedback>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label htmlFor='desc' id='desc'>Description</Label>\r\n                    <Input \r\n                        type='textarea' \r\n                        name='desc' \r\n                        id='desc' \r\n                        placeholder=\"Campground description\"\r\n                        value={description}\r\n                        onChange={(e) => setDescription(e.target.value)}\r\n                        onBlur = {() => setTouchedDescription(true)}\r\n                        valid={errors.desc === '' && description}\r\n                        invalid={errors.desc !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.desc}</FormFeedback>\r\n                </FormGroup>\r\n\r\n                <Button  \r\n                    block \r\n                    type=\"submit\" \r\n                    color=\"primary\"\r\n                    disabled = {errors.title || errors.price || errors.location\r\n                        || errors.image || errors.desc || !title || !image || !price || !location || !description}\r\n                >\r\n                    Edit campground\r\n                </Button>\r\n            </Form>\r\n\r\n            </FormContainer>\r\n            \r\n        </Zoom>\r\n    )\r\n}\r\n\r\nexport default EditCampgroundDetails\r\n","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\SignUpScreen.js",["107"],"import React,{useEffect,useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { Form, FormGroup, Label, Input,FormFeedback} from 'reactstrap';\r\nimport FormContainer from '../components/FormContainer';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useDispatch,useSelector} from 'react-redux'\r\nimport {USER_SIGNUP_RESET} from '../constants/userConstants'\r\nimport {signup,status} from '../actions/userActions'\r\n\r\nconst SignUpScreen = ({location,history}) => {\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n    const [email,setEmail] = useState('')\r\n    const [password,setPassword] = useState('')\r\n    const [username,setUserName] = useState('')\r\n\r\n    const [touchedEmail,setTouchedEmail] = useState(false)\r\n    const [touchedPassword,setTouchedPassword] = useState(false)\r\n    const [touchedUsername,setTouchedUsername] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n    const userSignUp = useSelector(state => state.signUp)\r\n    const {error,loading,userInfo,success} = userSignUp\r\n\r\n    const statusState = useSelector(state => state.status)\r\n    const {userInfo: userStatus,isLoggedIn} = statusState\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        dispatch(signup(email,password,username))\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if(isLoggedIn){\r\n            history.push(redirect)\r\n        }\r\n        else if(userInfo || userStatus || success || isLoggedIn){\r\n            await dispatch(status())\r\n            dispatch({type:USER_SIGNUP_RESET})\r\n            history.push(redirect)\r\n        }\r\n    },[success,history,userInfo,isLoggedIn,dispatch,userStatus,redirect])\r\n\r\n    function validate(){\r\n        const errors = {\r\n            email: '',\r\n            password: '',\r\n            username: ''\r\n        }\r\n        function validateEmail(elementValue){      \r\n            var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n            return emailPattern.test(elementValue); \r\n        } \r\n        if(touchedEmail && !validateEmail(email)){\r\n            errors.email = 'Not a valid email'\r\n        }\r\n        if(touchedPassword && password.length < 1){\r\n            errors.password = 'Password should be >= 1 characters'\r\n        }\r\n        if(touchedUsername && username.length<1){\r\n            errors.username = 'Password should be >= 1 characters'\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    const errors = validate();\r\n    return (\r\n        <>\r\n            <Link to={redirect} className='btn btn-light my-3'>\r\n                    Go Back\r\n            </Link>\r\n            <FormContainer>\r\n                <h1>Sign Up</h1>\r\n                \r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"username\">Username</Label>\r\n                        <Input type=\"input\" id=\"username\" name=\"username\"\r\n                            placeholder=\"John Doe\"\r\n                            value={username}\r\n                            onChange={(e) => setUserName(e.target.value)} \r\n                            onBlur = {() => setTouchedUsername(true)}\r\n                            valid={ errors.username==='' && username.length>=1}\r\n                            invalid={errors.username !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.username}</FormFeedback>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"email\">Email</Label>\r\n                        <Input type=\"email\" id=\"email\" name=\"email\"\r\n                            placeholder=\"abc@def.com\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)} \r\n                            onBlur = {() => setTouchedEmail(true)}\r\n                            valid={ errors.email==='' && email.length>=3}\r\n                            invalid={errors.email !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.email}</FormFeedback>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"password\">Password</Label>\r\n                        <Input type=\"password\" id=\"password\" name=\"password\"\r\n                            placeholder=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)} \r\n                            onBlur = {() => setTouchedPassword(true)}\r\n                            valid={ errors.password==='' && password.length>=1}\r\n                            invalid={errors.password !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.password}</FormFeedback>\r\n                    </FormGroup>\r\n                    {loading && <Loader />}\r\n                    {error && <Message variant='danger'>{error}</Message>}\r\n                    <Button\r\n                        block\r\n                        type='submit'\r\n                        color='primary'\r\n                        disabled = {errors.email || errors.password || !email || !password} >\r\n                            Sign Up\r\n                    </Button>\r\n                </Form>\r\n            </FormContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignUpScreen\r\n","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\screens\\SignInScreen.js",["108"],"import React,{useEffect,useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { Form, FormGroup, Label, Input,FormFeedback} from 'reactstrap';\r\nimport FormContainer from '../components/FormContainer';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useDispatch,useSelector} from 'react-redux'\r\nimport {USER_SIGNIN_RESET} from '../constants/userConstants'\r\nimport {signin,status} from '../actions/userActions'\r\nconst SignInScreen = ({location,history}) => {\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n    \r\n    const [email,setEmail] = useState('')\r\n    const [password,setPassword] = useState('')\r\n    \r\n    const [touchedEmail,setTouchedEmail] = useState(false)\r\n    const [touchedPassword,setTouchedPassword] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n    const userSignIn = useSelector(state => state.signIn)\r\n    const {error,loading,userInfo,success} = userSignIn\r\n\r\n    const statusState = useSelector(state => state.status)\r\n    const {userInfo: userStatus,isLoggedIn} = statusState\r\n    \r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        dispatch(signin(email,password))\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if(isLoggedIn){\r\n            history.push(redirect)\r\n        }\r\n        \r\n        else if(userInfo || userStatus || success || isLoggedIn){\r\n            \r\n            await dispatch(status())\r\n            dispatch({type:USER_SIGNIN_RESET})\r\n            history.push(redirect)\r\n        }\r\n    },[success,history,userInfo,isLoggedIn,dispatch,userStatus,redirect])\r\n\r\n    function validate(){\r\n        const errors = {\r\n            email: '',\r\n            password: ''\r\n        }\r\n        function validateEmail(elementValue){      \r\n            var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n            return emailPattern.test(elementValue); \r\n        } \r\n        if(touchedEmail && !validateEmail(email)){\r\n            errors.email = 'Not a valid email'\r\n        }\r\n        if(touchedPassword && password.length < 1){\r\n            errors.password = 'Password should be >= 1 characters'\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    const errors = validate();\r\n    return (\r\n        <>\r\n            <Link to={redirect} className='btn btn-light my-3'>\r\n                    Go Back\r\n            </Link>\r\n            <FormContainer>\r\n                <h1>Sign In</h1>\r\n                <Form onSubmit={submitHandler}>\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"email\">Email</Label>\r\n                        <Input type=\"email\" id=\"email\" name=\"email\"\r\n                            placeholder=\"abc@def.com\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)} \r\n                            onBlur = {() => setTouchedEmail(true)}\r\n                            valid={ errors.email==='' && email.length>=3}\r\n                            invalid={errors.email !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.email}</FormFeedback>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"password\">Password</Label>\r\n                        <Input type=\"password\" id=\"password\" name=\"password\"\r\n                            placeholder=\"password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)} \r\n                            onBlur = {() => setTouchedPassword(true)}\r\n                            valid={ errors.password==='' && password.length>=1}\r\n                            invalid={errors.password !== ''}\r\n                        />\r\n                        <FormFeedback>{errors.password}</FormFeedback>\r\n                    </FormGroup>\r\n                    {loading && <Loader />}\r\n                    {error && <Message variant='danger'>Invalid email or password</Message>}\r\n                    <Button\r\n                        block\r\n                        type='submit'\r\n                        color='primary'\r\n                        disabled = {errors.email || errors.password || !email || !password} >\r\n                            Sign In\r\n                    </Button>\r\n                </Form>\r\n            </FormContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignInScreen\r\n","D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\reducers\\userReducer.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\constants\\userConstants.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\actions\\userActions.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\reducers\\appReducer.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\constants\\appConstants.js",[],"D:\\Web Dev\\Projects\\TrekNTravel\\frontend\\src\\components\\PopUp.js",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":49,"column":13,"nodeType":"115","messageId":"116","endLine":52,"endColumn":14},{"ruleId":"117","severity":1,"message":"118","line":20,"column":26,"nodeType":"119","messageId":"120","endLine":20,"endColumn":38},{"ruleId":"117","severity":1,"message":"121","line":27,"column":22,"nodeType":"119","messageId":"120","endLine":27,"endColumn":32},{"ruleId":"122","severity":1,"message":"123","line":35,"column":15,"nodeType":"124","endLine":44,"endColumn":6},{"ruleId":"122","severity":1,"message":"123","line":33,"column":15,"nodeType":"124","endLine":44,"endColumn":6},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'loadingPlace' is assigned a value but never used.","Identifier","unusedVar","'userStatus' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]